apply plugin: 'com.github.spotbugs'

def classLoader = plugins.getAt('com.github.spotbugs').class.classLoader
def SpotBugsTask = classLoader.findLoadedClass('com.github.spotbugs.snom.SpotBugsTask')

spotbugs {
    showProgress = true
    ignoreFailures = true
    effort = 'default'
    reportLevel = 'medium'
    maxHeapSize = '1g'
    excludeFilter = file("${project.rootDir}/gradle/spotbugs-filter.xml")
}

tasks.withType(SpotBugsTask) {
    reports {
        html {
            required = false
            stylesheet = 'fancy-hist.xsl'
        }
        xml {
            required = true
        }
    }
}


apply plugin: "jacoco"
jacoco {
    reportsDirectory = file("$buildDir/reports/jacoco")
}
jacocoTestReport {
    classDirectories.from = fileTree(
        dir: "${buildDir}/classes",
        excludes: ['**/Manifest*.*']
    )
    reports {
        xml.required  = true
        html.required = true
    }
}


apply plugin: 'pmd'
pmd {
    ignoreFailures = true
    rulesMinimumPriority = 3
    ruleSets = []
    ruleSetFiles = files("${project.rootDir}/gradle/pmd-rules.xml")
    reportsDir = file("$buildDir/reports/pmd")
}
tasks.withType(Pmd) {
    reports {
        xml.required  = true
        html.required = true
    }
}


apply plugin: 'org.sonarqube'
sonarqube {
    properties {
        property 'sonar.login', System.getenv('SONAR_LOGIN')
        property 'sonar.projectKey', System.getenv('SONAR_KEY')
        property 'sonar.organization', System.getenv('SONAR_ORG')

        property 'sonar.verbose', 'true'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.exclusions', '**/*.xml, **/*.js, **/*.css, **/*.sql, **/*.html'
        property 'sonar.host.url', 'https://sonarcloud.io'

        property 'sonar.java.pmd.reportPaths', "$buildDir/reports/pmd/main.xml"
        property 'sonar.java.spotbugs.reportPaths', "$buildDir/reports/spotbugs/main.xml"
        property 'sonar.coverage.jacoco.xmlReportPaths', "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
    }
}
